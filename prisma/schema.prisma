generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  password     String
  email        String         @unique
  bio          String?
  avatar       String?
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  tweet        Tweet[]
  like         Like[]
  response     Response[]
  LikeResponse LikeResponse[]
}

model Tweet {
  id         Int      @id @default(autoincrement())
  title      String
  tweet      String
  photo      String?
  views      Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  like     Like[]
  response Response[]
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int

  @@id(name: "id", [tweetId, userId])
}

model LikeResponse {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  reponse    Response @relation(fields: [responseId], references: [id])
  responseId Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int

  @@id(name: "id", [responseId, userId])
}

model Response {
  id      Int    @id @default(autoincrement())
  payload String
  likes   Int    @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  tweet        Tweet          @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId      Int
  LikeResponse LikeResponse[]
}
